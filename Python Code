import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, f1_score

# Load the dataset
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/00591/name_gender_dataset.csv'
df = pd.read_csv(url)

# Data preprocessing
df = df.dropna(subset=['Name', 'Gender'])  # Drop missing values
df['Name'] = df['Name'].str.lower()  # Convert names to lowercase
df['Last_Letter'] = df['Name'].str[-1]  # Extract last letter

# Convert last letter into numerical features
vectorizer = CountVectorizer(analyzer='char')
X = vectorizer.fit_transform(df['Last_Letter'])

# Encode gender labels (M -> 0, F -> 1)
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(df['Gender'])

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler(with_mean=False)  # with_mean=False because of sparse matrix
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train the Logistic Regression model
model = LogisticRegression(max_iter=500, solver='saga')
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print(f'Accuracy: {accuracy:.2f}')
print(f'F1 Score: {f1:.2f}')

# Function to predict gender for a new name
def predict_gender(name):
    last_letter = name[-1].lower()  # Extract last letter
    last_letter_vector = vectorizer.transform([last_letter])  # Convert to vector
    last_letter_scaled = scaler.transform(last_letter_vector)  # Scale it
    gender_label = model.predict(last_letter_scaled)  # Predict
    gender = label_encoder.inverse_transform(gender_label)  # Convert back to category
    return gender[0]

# Get user input and predict gender
while True:
    new_name = input("Enter a name to predict gender (or type 'exit' to quit): ")
    if new_name.lower() == 'exit':
        break
    predicted_gender = predict_gender(new_name)
    print(f'The predicted gender for the name "{new_name}" is {predicted_gender}.')

